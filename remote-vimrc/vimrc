let mapleader=","

" size of a hard tabstop
set tabstop=4

" size of an "indent"
set shiftwidth=4

" a combination of spaces and tabs are used to simulate tab stops at a width
" other than the (hard)tabstop
set softtabstop=4

" Set Auto Indent on
set autoindent
set smartindent
set expandtab

syntax on
set nu
"set relativenumber

set hlsearch

set synmaxcol=300
set laststatus=2
"set visualbell

set undofile
set colorcolumn=90

set gdefault

nnoremap <tab> %
vnoremap <tab> %

"I hit F1 instead of esc sometimes
map! <F1> <ESC>
nnoremap <F1> <ESC>
cnoremap <F1> <ESC>
inoremap 9w <ESC>:w<CR>
nnoremap 9w <ESC>:w<CR>
inoremap <C-@> <C-n>

cnoremap jj <ESC>
inoremap jj <ESC>

nnoremap ; :

nnoremap <leader>FF :vim 
nnoremap <C-f> :vim 

nmap ,s <C-w>s
nmap ,l <C-w>l
nmap ,j <C-w>j
nmap ,k <C-w>k
nmap ,h <C-w>h
nmap ,v <C-w>v
nmap ,q <C-w>q
nmap ,9 <C-w><C-]><C-w>L
nmap Ws <C-w>s
nmap Wl <C-w>l
nmap Wj <C-w>j
nmap Wk <C-w>k
nmap Wh <C-w>h
nmap Wv <C-w>v
nmap Wq <C-w>q
nmap W9 <C-w><C-]><C-w>L
nmap Wf <C-w>f<C-w>L

set cpoptions+=$
nmap th gT
nmap tl gt
nmap <C-Left> gT
nmap <C-Right> gt
nmap te :tabedit 
nmap tf :tabfind 
nmap tq :tabclose<CR>
nmap t0 :tabfirst<CR>
nmap t$ :tablast<CR>
nmap tt gt
nmap tw <C-w>T
nmap tn :tabnew<CR>
nmap t9 <C-w><C-]><C-w>T
nmap tgf <C-w>gf
nnoremap <silent> tH :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> tL :execute 'silent! tabmove ' . tabpagenr()<CR>
nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . tabpagenr()<CR>

nmap 99 <C-]>
nmap 9v <C-w>v<C-w>l<C-]>
nmap 9h <C-o>
nmap 9f :vim <C-r><C-w> %:p:h/*<CR>:cw<CR>
nmap 9pf :vim <C-r><C-w> %:p:h:h/*<CR>:cw<CR>
nmap 9ppf :vim <C-r><C-w> %:p:h:h:h/*<CR>:cw<CR>
nmap 9pppf :vim <C-r><C-w> %:p:h:h:h:h/*<CR>:cw<CR>
nmap 9ppppf :vim <C-r><C-w> %:p:h:h:h:h:h/*<CR>:cw<CR>

nmap <C-d> :colorscheme default<CR>

cmap Cword <C-r><C-w>
cnoremap <leader>cw <C-r><C-w>
cmap Cfile <C-r>%
cnoremap <leader>cf <C-r>%
cnoremap <leader>p <C-r>"

inoremap <F9> <C-O>za
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf

nnoremap <leader>* :CtrlP<CR>
vnoremap <leader>c yo<C-R>=system('<C-r>"')<CR>

command Ses :source .session.vim~
command Vimrc e ~/.vimrc
command Sh ConqueTerm bash
command Note tabnew<CR>:lcd ~/git/myScripts/notes/

nnoremap <leader>r :ConqueTerm 
nnoremap <leader>ru :ConqueTerm 

set wildmode=longest,list

set background=light

set nf=octal,hex,alpha

" source .../.vimrc and use .../tags in ancestor of source directory.
" useful when you have source tree eight fathom deep,
" an exercise in vim loops.
let parent=1
let local_vimrc = ".vimrc"
let local_tags = "tags"
while parent <= 8
  if filewritable(local_vimrc)
"    echomsg "sourcing " . local_vimrc
"    exe ":so " . local_vimrc
  endif
  let local_vimrc = "../". local_vimrc
  let local_tags = "../". local_tags
  exe ":set tags+=".local_tags
  let parent = parent+1
  " todo: stop at the root on any system and also ~ on unix.
endwhile
unlet parent local_vimrc

" session and backup
au focuslost * :wa
au vimleavepre * :mksession!.session.vim~
"au bufwritepost,filewritepost * :silent !mkdir -p ~/documents/gdrive/vim/`date +\%d\%b\%y` && cp <afile> ~/documents/gdrive/vim/`date +\%d\%b\%y`

function Diffw()
    let opt = ""
     if &diffopt =~ "icase"
       let opt = opt . "-i "
     endif
     if &diffopt =~ "iwhite"
       let opt = opt . "-w " " vim uses -b by default
     endif
     silent execute "!diff -a --binary " . opt .
       \ v:fname_in . " " . v:fname_new .  " > " . v:fname_out
endfunction

set diffopt+=iwhite
set diffexpr=Diffw()

